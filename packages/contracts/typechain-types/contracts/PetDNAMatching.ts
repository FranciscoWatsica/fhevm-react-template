/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PetDNAMatching {
  export type MatchResultStruct = {
    requestId: BigNumberish;
    petId1: BigNumberish;
    petId2: BigNumberish;
    compatibilityScore: BigNumberish;
    isMatched: boolean;
    matchTime: BigNumberish;
  };

  export type MatchResultStructOutput = [
    requestId: bigint,
    petId1: bigint,
    petId2: bigint,
    compatibilityScore: bigint,
    isMatched: boolean,
    matchTime: bigint
  ] & {
    requestId: bigint;
    petId1: bigint;
    petId2: bigint;
    compatibilityScore: bigint;
    isMatched: boolean;
    matchTime: bigint;
  };
}

export interface PetDNAMatchingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createMatchingProfile"
      | "getOwnerPets"
      | "getPetInfo"
      | "getPetMatches"
      | "getTotalPets"
      | "matchingCost"
      | "matchingProfiles"
      | "nextPetId"
      | "owner"
      | "ownerToPets"
      | "petMatches"
      | "pets"
      | "processMatchingResult"
      | "protocolId"
      | "registerPet"
      | "requestMatching"
      | "setBreedingStatus"
      | "setMatchingCost"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BreedingStatusChanged"
      | "MatchingCompleted"
      | "MatchingProfileCreated"
      | "MatchingRequested"
      | "PetRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createMatchingProfile",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerPets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPetInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPetMatches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchingCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchingProfiles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextPetId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerToPets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "petMatches",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pets", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "processMatchingResult",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerPet",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestMatching",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedingStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchingCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createMatchingProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerPets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPetInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPetMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchingCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchingProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerToPets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "petMatches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMatchingResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMatching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreedingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchingCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BreedingStatusChangedEvent {
  export type InputTuple = [petId: BigNumberish, available: boolean];
  export type OutputTuple = [petId: bigint, available: boolean];
  export interface OutputObject {
    petId: bigint;
    available: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchingCompletedEvent {
  export type InputTuple = [
    petId1: BigNumberish,
    petId2: BigNumberish,
    compatibilityScore: BigNumberish
  ];
  export type OutputTuple = [
    petId1: bigint,
    petId2: bigint,
    compatibilityScore: bigint
  ];
  export interface OutputObject {
    petId1: bigint;
    petId2: bigint;
    compatibilityScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchingProfileCreatedEvent {
  export type InputTuple = [petId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [petId: bigint, owner: string];
  export interface OutputObject {
    petId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchingRequestedEvent {
  export type InputTuple = [
    petId1: BigNumberish,
    petId2: BigNumberish,
    requestId: BigNumberish
  ];
  export type OutputTuple = [petId1: bigint, petId2: bigint, requestId: bigint];
  export interface OutputObject {
    petId1: bigint;
    petId2: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PetRegisteredEvent {
  export type InputTuple = [
    petId: BigNumberish,
    owner: AddressLike,
    name: string
  ];
  export type OutputTuple = [petId: bigint, owner: string, name: string];
  export interface OutputObject {
    petId: bigint;
    owner: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PetDNAMatching extends BaseContract {
  connect(runner?: ContractRunner | null): PetDNAMatching;
  waitForDeployment(): Promise<this>;

  interface: PetDNAMatchingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMatchingProfile: TypedContractMethod<
    [
      _petId: BigNumberish,
      _minHealthScore: BigNumberish,
      _temperamentPreference: BigNumberish,
      _maxAge: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getOwnerPets: TypedContractMethod<[_owner: AddressLike], [bigint[]], "view">;

  getPetInfo: TypedContractMethod<
    [_petId: BigNumberish],
    [
      [string, string, string, bigint, string, boolean] & {
        name: string;
        species: string;
        breed: string;
        birthYear: bigint;
        petOwner: string;
        availableForBreeding: boolean;
      }
    ],
    "view"
  >;

  getPetMatches: TypedContractMethod<
    [_petId: BigNumberish],
    [PetDNAMatching.MatchResultStructOutput[]],
    "view"
  >;

  getTotalPets: TypedContractMethod<[], [bigint], "view">;

  matchingCost: TypedContractMethod<[], [bigint], "view">;

  matchingProfiles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        petId: bigint;
        minHealthScore: string;
        temperamentPreference: string;
        maxAge: bigint;
        isActive: boolean;
        createdTime: bigint;
      }
    ],
    "view"
  >;

  nextPetId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerToPets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  petMatches: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        requestId: bigint;
        petId1: bigint;
        petId2: bigint;
        compatibilityScore: bigint;
        isMatched: boolean;
        matchTime: bigint;
      }
    ],
    "view"
  >;

  pets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint
      ] & {
        id: bigint;
        owner: string;
        name: string;
        species: string;
        breed: string;
        birthYear: bigint;
        healthScore: string;
        geneticMarker1: string;
        geneticMarker2: string;
        geneticMarker3: string;
        temperament: string;
        isRegistered: boolean;
        availableForBreeding: boolean;
        registrationTime: bigint;
      }
    ],
    "view"
  >;

  processMatchingResult: TypedContractMethod<
    [
      requestId: BigNumberish,
      healthSum: BigNumberish,
      temperamentDiff: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registerPet: TypedContractMethod<
    [
      _name: string,
      _species: string,
      _breed: string,
      _birthYear: BigNumberish,
      _healthScore: BigNumberish,
      _geneticMarker1: BigNumberish,
      _geneticMarker2: BigNumberish,
      _geneticMarker3: BigNumberish,
      _temperament: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  requestMatching: TypedContractMethod<
    [_petId1: BigNumberish, _petId2: BigNumberish],
    [void],
    "payable"
  >;

  setBreedingStatus: TypedContractMethod<
    [_petId: BigNumberish, _available: boolean],
    [void],
    "nonpayable"
  >;

  setMatchingCost: TypedContractMethod<
    [_newCost: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMatchingProfile"
  ): TypedContractMethod<
    [
      _petId: BigNumberish,
      _minHealthScore: BigNumberish,
      _temperamentPreference: BigNumberish,
      _maxAge: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOwnerPets"
  ): TypedContractMethod<[_owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPetInfo"
  ): TypedContractMethod<
    [_petId: BigNumberish],
    [
      [string, string, string, bigint, string, boolean] & {
        name: string;
        species: string;
        breed: string;
        birthYear: bigint;
        petOwner: string;
        availableForBreeding: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPetMatches"
  ): TypedContractMethod<
    [_petId: BigNumberish],
    [PetDNAMatching.MatchResultStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalPets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "matchingCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "matchingProfiles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        petId: bigint;
        minHealthScore: string;
        temperamentPreference: string;
        maxAge: bigint;
        isActive: boolean;
        createdTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextPetId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerToPets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "petMatches"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        requestId: bigint;
        petId1: bigint;
        petId2: bigint;
        compatibilityScore: bigint;
        isMatched: boolean;
        matchTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint
      ] & {
        id: bigint;
        owner: string;
        name: string;
        species: string;
        breed: string;
        birthYear: bigint;
        healthScore: string;
        geneticMarker1: string;
        geneticMarker2: string;
        geneticMarker3: string;
        temperament: string;
        isRegistered: boolean;
        availableForBreeding: boolean;
        registrationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processMatchingResult"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      healthSum: BigNumberish,
      temperamentDiff: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerPet"
  ): TypedContractMethod<
    [
      _name: string,
      _species: string,
      _breed: string,
      _birthYear: BigNumberish,
      _healthScore: BigNumberish,
      _geneticMarker1: BigNumberish,
      _geneticMarker2: BigNumberish,
      _geneticMarker3: BigNumberish,
      _temperament: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestMatching"
  ): TypedContractMethod<
    [_petId1: BigNumberish, _petId2: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setBreedingStatus"
  ): TypedContractMethod<
    [_petId: BigNumberish, _available: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMatchingCost"
  ): TypedContractMethod<[_newCost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BreedingStatusChanged"
  ): TypedContractEvent<
    BreedingStatusChangedEvent.InputTuple,
    BreedingStatusChangedEvent.OutputTuple,
    BreedingStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "MatchingCompleted"
  ): TypedContractEvent<
    MatchingCompletedEvent.InputTuple,
    MatchingCompletedEvent.OutputTuple,
    MatchingCompletedEvent.OutputObject
  >;
  getEvent(
    key: "MatchingProfileCreated"
  ): TypedContractEvent<
    MatchingProfileCreatedEvent.InputTuple,
    MatchingProfileCreatedEvent.OutputTuple,
    MatchingProfileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MatchingRequested"
  ): TypedContractEvent<
    MatchingRequestedEvent.InputTuple,
    MatchingRequestedEvent.OutputTuple,
    MatchingRequestedEvent.OutputObject
  >;
  getEvent(
    key: "PetRegistered"
  ): TypedContractEvent<
    PetRegisteredEvent.InputTuple,
    PetRegisteredEvent.OutputTuple,
    PetRegisteredEvent.OutputObject
  >;

  filters: {
    "BreedingStatusChanged(uint256,bool)": TypedContractEvent<
      BreedingStatusChangedEvent.InputTuple,
      BreedingStatusChangedEvent.OutputTuple,
      BreedingStatusChangedEvent.OutputObject
    >;
    BreedingStatusChanged: TypedContractEvent<
      BreedingStatusChangedEvent.InputTuple,
      BreedingStatusChangedEvent.OutputTuple,
      BreedingStatusChangedEvent.OutputObject
    >;

    "MatchingCompleted(uint256,uint256,uint8)": TypedContractEvent<
      MatchingCompletedEvent.InputTuple,
      MatchingCompletedEvent.OutputTuple,
      MatchingCompletedEvent.OutputObject
    >;
    MatchingCompleted: TypedContractEvent<
      MatchingCompletedEvent.InputTuple,
      MatchingCompletedEvent.OutputTuple,
      MatchingCompletedEvent.OutputObject
    >;

    "MatchingProfileCreated(uint256,address)": TypedContractEvent<
      MatchingProfileCreatedEvent.InputTuple,
      MatchingProfileCreatedEvent.OutputTuple,
      MatchingProfileCreatedEvent.OutputObject
    >;
    MatchingProfileCreated: TypedContractEvent<
      MatchingProfileCreatedEvent.InputTuple,
      MatchingProfileCreatedEvent.OutputTuple,
      MatchingProfileCreatedEvent.OutputObject
    >;

    "MatchingRequested(uint256,uint256,uint256)": TypedContractEvent<
      MatchingRequestedEvent.InputTuple,
      MatchingRequestedEvent.OutputTuple,
      MatchingRequestedEvent.OutputObject
    >;
    MatchingRequested: TypedContractEvent<
      MatchingRequestedEvent.InputTuple,
      MatchingRequestedEvent.OutputTuple,
      MatchingRequestedEvent.OutputObject
    >;

    "PetRegistered(uint256,address,string)": TypedContractEvent<
      PetRegisteredEvent.InputTuple,
      PetRegisteredEvent.OutputTuple,
      PetRegisteredEvent.OutputObject
    >;
    PetRegistered: TypedContractEvent<
      PetRegisteredEvent.InputTuple,
      PetRegisteredEvent.OutputTuple,
      PetRegisteredEvent.OutputObject
    >;
  };
}
